datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  phoneWA    String?
  nik        Int
  signature  String?
  apiToken   String?   @unique
  isVerified Boolean   @default(false)
  createdAt  DateTime? @default(now())
  divisionId String
  division   Division  @relation(fields: [divisionId], references: [id], onDelete: Cascade)

  roles       Roles[]
  bankAccount BankAccount[]
  submissions submission[]
  approvals   Approval[]        @relation("UserApprovals")
  histories   ApprovalHistory[]
}

model BankAccount {
  id        String    @id @default(uuid())
  idUser    String
  name      String
  bankName  String
  number    String
  createdAt DateTime? @default(now())

  user User @relation(fields: [idUser], references: [id], onDelete: Cascade)
}

model Roles {
  id        String    @id @default(uuid())
  name      String
  code      String    @unique
  createdAt DateTime? @default(now())

  users User[]
}

model Division {
  id        String    @id @default(uuid())
  name      String
  Code      String    @unique
  createdAt DateTime? @default(now())

  user User[]
}

model submission {
  id          String    @id @default(uuid())
  userId      String
  number      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  date        DateTime
  activity    String
  description String
  status      String?

  submissionDetail submissionDetail[]
  approval         Approval[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  project          projectCode        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model submissionDetail {
  id           String    @id @default(uuid())
  submissionId String
  name         String
  qty          Int
  categoryId   String
  amount       Float
  evidence     String?
  createdAt    DateTime? @default(now())

  submission submission         @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  category   categorySubmission @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model categorySubmission {
  id   String @id @default(uuid())
  name String
  code String

  submissionDetail submissionDetail[]
}

model typeSubmission {
  id          String    @id @default(uuid())
  name        String
  code        String?
  description String?
  createdAt   DateTime? @default(now())
}

model projectCode {
  id          String    @id @default(uuid())
  name        String
  code        String
  description String
  createdAt   DateTime? @default(now())

  submission submission[]
}

model Approval {
  id           String            @id @default(uuid())
  submissionId String
  submission   submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  sequence     Int
  requiredRole String
  status       String            @default("PENDING")
  approverId   String?
  approver     User?             @relation("UserApprovals", fields: [approverId], references: [id], onDelete: Cascade)
  comment      String?
  histories    ApprovalHistory[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ApprovalHistory {
  id         String   @id @default(uuid())
  approvalId String
  approval   Approval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  actorId    String?
  actor      User?    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  oldStatus  String?
  newStatus  String
  comment    String?
  createdAt  DateTime @default(now())
}
